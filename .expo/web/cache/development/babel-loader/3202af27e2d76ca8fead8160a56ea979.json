{"ast":null,"code":"export var canvas2Cartesian = function () {\n  var _f = function _f(v, center) {\n    return {\n      x: v.x - center.x,\n      y: -1 * (v.y - center.y)\n    };\n  };\n  _f._closure = {};\n  _f.asString = \"function canvas2Cartesian(v,center){return{x:v.x-center.x,y:-1*(v.y-center.y)};}\";\n  _f.__workletHash = 3562370629264;\n  _f.__location = \"D:\\\\nouveaux projet\\\\ajout panier buttonsheet\\\\node_modules\\\\@gorhom\\\\bottom-sheet\\\\node_modules\\\\react-native-redash\\\\lib\\\\module\\\\Coordinates.js (1:28)\";\n  global.__reanimatedWorkletInit(_f);\n  return _f;\n}();\nexport var cartesian2Canvas = function () {\n  var _f = function _f(v, center) {\n    return {\n      x: v.x + center.x,\n      y: -1 * v.y + center.y\n    };\n  };\n  _f._closure = {};\n  _f.asString = \"function cartesian2Canvas(v,center){return{x:v.x+center.x,y:-1*v.y+center.y};}\";\n  _f.__workletHash = 7491902935633;\n  _f.__location = \"D:\\\\nouveaux projet\\\\ajout panier buttonsheet\\\\node_modules\\\\@gorhom\\\\bottom-sheet\\\\node_modules\\\\react-native-redash\\\\lib\\\\module\\\\Coordinates.js (1:147)\";\n  global.__reanimatedWorkletInit(_f);\n  return _f;\n}();\nexport var cartesian2Polar = function () {\n  var _f = function _f(v) {\n    return {\n      theta: Math.atan2(v.y, v.x),\n      radius: Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2))\n    };\n  };\n  _f._closure = {};\n  _f.asString = \"function cartesian2Polar(v){return{theta:Math.atan2(v.y,v.x),radius:Math.sqrt(Math.pow(v.x,2)+Math.pow(v.y,2))};}\";\n  _f.__workletHash = 12160470993110;\n  _f.__location = \"D:\\\\nouveaux projet\\\\ajout panier buttonsheet\\\\node_modules\\\\@gorhom\\\\bottom-sheet\\\\node_modules\\\\react-native-redash\\\\lib\\\\module\\\\Coordinates.js (1:263)\";\n  global.__reanimatedWorkletInit(_f);\n  return _f;\n}();\nexport var polar2Cartesian = function () {\n  var _f = function _f(p) {\n    return {\n      x: p.radius * Math.cos(p.theta),\n      y: p.radius * Math.sin(p.theta)\n    };\n  };\n  _f._closure = {};\n  _f.asString = \"function polar2Cartesian(p){return{x:p.radius*Math.cos(p.theta),y:p.radius*Math.sin(p.theta)};}\";\n  _f.__workletHash = 8363087767813;\n  _f.__location = \"D:\\\\nouveaux projet\\\\ajout panier buttonsheet\\\\node_modules\\\\@gorhom\\\\bottom-sheet\\\\node_modules\\\\react-native-redash\\\\lib\\\\module\\\\Coordinates.js (1:414)\";\n  global.__reanimatedWorkletInit(_f);\n  return _f;\n}();\nexport var polar2Canvas = function () {\n  var _f = function _f(p, center) {\n    return cartesian2Canvas(polar2Cartesian(p), center);\n  };\n  _f._closure = {\n    cartesian2Canvas: cartesian2Canvas,\n    polar2Cartesian: polar2Cartesian\n  };\n  _f.asString = \"function polar2Canvas(p,center){const{cartesian2Canvas,polar2Cartesian}=jsThis._closure;{return cartesian2Canvas(polar2Cartesian(p),center);}}\";\n  _f.__workletHash = 9389364638073;\n  _f.__location = \"D:\\\\nouveaux projet\\\\ajout panier buttonsheet\\\\node_modules\\\\@gorhom\\\\bottom-sheet\\\\node_modules\\\\react-native-redash\\\\lib\\\\module\\\\Coordinates.js (1:544)\";\n  global.__reanimatedWorkletInit(_f);\n  return _f;\n}();\nexport var canvas2Polar = function () {\n  var _f = function _f(v, center) {\n    return cartesian2Polar(canvas2Cartesian(v, center));\n  };\n  _f._closure = {\n    cartesian2Polar: cartesian2Polar,\n    canvas2Cartesian: canvas2Cartesian\n  };\n  _f.asString = \"function canvas2Polar(v,center){const{cartesian2Polar,canvas2Cartesian}=jsThis._closure;{return cartesian2Polar(canvas2Cartesian(v,center));}}\";\n  _f.__workletHash = 11172716429561;\n  _f.__location = \"D:\\\\nouveaux projet\\\\ajout panier buttonsheet\\\\node_modules\\\\@gorhom\\\\bottom-sheet\\\\node_modules\\\\react-native-redash\\\\lib\\\\module\\\\Coordinates.js (1:663)\";\n  global.__reanimatedWorkletInit(_f);\n  return _f;\n}();","map":{"version":3,"sources":["Coordinates.ts"],"names":["canvas2Cartesian","v","center","x","y","cartesian2Canvas","cartesian2Polar","theta","Math","atan2","radius","sqrt","polar2Cartesian","p","cos","sin","polar2Canvas","canvas2Polar"],"mappings":"AAUA,OAAO,IAAMA,gBAAAA;EAAAA,qBAAoBC,CAAD,EAAYC,MAAZ,EAA+B;IAE7D,OAAO;MACLC,CAAC,EAAEF,CAAC,CAACE,CAAFF,GAAMC,MAAM,CAACC,CADX;MAELC,CAAC,EAAE,CAAC,CAAD,IAAMH,CAAC,CAACG,CAAFH,GAAMC,MAAM,CAACE,CAAnB;IAFE,CAAP;EAID,CANM;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AAAA;AAWP,OAAO,IAAMC,gBAAAA;EAAAA,qBAAoBJ,CAAD,EAAYC,MAAZ,EAA+B;IAE7D,OAAO;MACLC,CAAC,EAAEF,CAAC,CAACE,CAAFF,GAAMC,MAAM,CAACC,CADX;MAELC,CAAC,EAAE,CAAC,CAAD,GAAKH,CAAC,CAACG,CAAP,GAAWF,MAAM,CAACE;IAFhB,CAAP;EAID,CANM;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AAAA;AAWP,OAAO,IAAME,eAAAA;EAAAA,qBAAmBL,CAAD,EAAe;IAE5C,OAAO;MACLM,KAAK,EAAEC,IAAI,CAACC,KAALD,CAAWP,CAAC,CAACG,CAAbI,EAAgBP,CAAC,CAACE,CAAlBK,CADF;MAELE,MAAM,EAAEF,IAAI,CAACG,IAALH,CAAU,IAAA,CAAA,GAAA,CAAA,CAAC,CAACL,CAAF,EAAO,CAAP,CAAA,GAAA,IAAA,CAAA,GAAA,CAAWF,CAAC,CAACG,CAAb,EAAkB,CAAlB,CAAVI;IAFH,CAAP;EAID,CANM;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AAAA;AAWP,OAAO,IAAMI,eAAAA;EAAAA,qBAAmBC,CAAD,EAAmB;IAEhD,OAAO;MACLV,CAAC,EAAEU,CAAC,CAACH,MAAFG,GAAWL,IAAI,CAACM,GAALN,CAASK,CAAC,CAACN,KAAXC,CADT;MAELJ,CAAC,EAAES,CAAC,CAACH,MAAFG,GAAWL,IAAI,CAACO,GAALP,CAASK,CAAC,CAACN,KAAXC;IAFT,CAAP;EAID,CANM;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AAAA;AAWP,OAAO,IAAMQ,YAAAA;EAAAA,qBAAgBH,CAAD,EAAgBX,MAAhB,EAAmC;IAE7D,OAAOG,gBAAgB,CAACO,eAAe,CAACC,CAAD,CAAhB,EAAqBX,MAArB,CAAvB;EACD,CAHM;EAAA;IAAA,kB;;;;;;;;GAAA;AAQP,OAAO,IAAMe,YAAAA;EAAAA,qBAAgBhB,CAAD,EAAYC,MAAZ,EAA+B;IAEzD,OAAOI,eAAe,CAACN,gBAAgB,CAACC,CAAD,EAAIC,MAAJ,CAAjB,CAAtB;EACD,CAHM;EAAA;IAAA,iB;;;;;;;;GAAA","sourcesContent":["import type { Vector } from \"./Vectors\";\n\nexport interface PolarPoint {\n  theta: number;\n  radius: number;\n}\n\n/**\n * @worklet\n */\nexport const canvas2Cartesian = (v: Vector, center: Vector) => {\n  \"worklet\";\n  return {\n    x: v.x - center.x,\n    y: -1 * (v.y - center.y),\n  };\n};\n\n/**\n * @worklet\n */\nexport const cartesian2Canvas = (v: Vector, center: Vector) => {\n  \"worklet\";\n  return {\n    x: v.x + center.x,\n    y: -1 * v.y + center.y,\n  };\n};\n\n/**\n * @worklet\n */\nexport const cartesian2Polar = (v: Vector) => {\n  \"worklet\";\n  return {\n    theta: Math.atan2(v.y, v.x),\n    radius: Math.sqrt(v.x ** 2 + v.y ** 2),\n  };\n};\n\n/**\n * @worklet\n */\nexport const polar2Cartesian = (p: PolarPoint) => {\n  \"worklet\";\n  return {\n    x: p.radius * Math.cos(p.theta),\n    y: p.radius * Math.sin(p.theta),\n  };\n};\n\n/**\n * @worklet\n */\nexport const polar2Canvas = (p: PolarPoint, center: Vector) => {\n  \"worklet\";\n  return cartesian2Canvas(polar2Cartesian(p), center);\n};\n\n/**\n * @worklet\n */\nexport const canvas2Polar = (v: Vector, center: Vector) => {\n  \"worklet\";\n  return cartesian2Polar(canvas2Cartesian(v, center));\n};\n"]},"metadata":{},"sourceType":"module"}